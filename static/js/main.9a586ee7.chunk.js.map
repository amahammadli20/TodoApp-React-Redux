{"version":3,"sources":["reportWebVitals.js","components/TodoInp/ToDoInpSlice.js","components/TodoItem/ToDoItemWrapper.js","components/TodoItem/index.js","components/TodoItem/TodoItem.js","components/TodoInp/VisibilityLinks.js","components/TodoInp/index.js","components/TodoInp/TodoInp.js","store.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","prevTodos","JSON","parse","window","localStorage","getItem","slice","createSlice","name","initialState","todos","visibility","reducers","setTodos","state","action","payload","setVisibility","setCompleted","todo","id","itemId","completed","checked","deleteItem","filter","clearCompleted","actions","TodoItemWrapper","useSelector","todoinp","map","item","TodoItem","props","dispatch","useDispatch","className","style","border","borderRadius","type","onChange","event","target","textDecoration","color","title","onClick","outline","padding","backgroundColor","VisibilityLinks","TodoInp","inputRef","React","useRef","useEffect","setItem","stringify","Fragment","onSubmit","preventDefault","inputValue","current","value","Date","now","placeholder","ref","store","configureStore","reducer","toDoInputReducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9a586ee7.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {createSlice} from '@reduxjs/toolkit';\r\n\r\n// let prevTodos = window.localStorage.getItem('todos');\r\n//     if (!prevTodos) {\r\n//         prevTodos = [];\r\n//     } else {\r\n//         prevTodos = JSON.parse(prevTodos);\r\n//     }\r\n\r\n\r\n//eger browser localstorage-i destekleyirse getItem-i cagir\r\nconst prevTodos = JSON.parse(window.localStorage?.getItem('todos')) || [];\r\n\r\nconst slice = createSlice({\r\n    name: 'todoInp',\r\n    initialState: {\r\n        todos: prevTodos,\r\n        visibility: 'all'\r\n    },\r\n    reducers: {\r\n        //setTodos-a ne gonderirikse gelib action-nun payload-na dusecek\r\n        setTodos: (state, action) => {\r\n            state.todos = action.payload;\r\n        },\r\n        setVisibility: (state, action) => {\r\n            state.visibility = action.payload\r\n        },\r\n\r\n        setCompleted: (state, action) => {\r\n    \r\n            for(let todo of state.todos) {\r\n                if (todo.id === action.payload.itemId) {\r\n                    todo.completed = action.payload.checked;\r\n                    break;\r\n                }\r\n            }\r\n        },\r\n    \r\n        deleteItem: (state, action) => {\r\n            state.todos = state.todos.filter(todo => todo.id !== action.payload)\r\n        },\r\n    \r\n        clearCompleted: (state) => {\r\n            state.todos = state.todos.filter(todo => !todo.completed);\r\n        }\r\n    }\r\n})\r\n\r\nexport default slice.reducer;\r\n\r\nexport const {\r\n    setTodos,\r\n    setVisibility,\r\n    setCompleted,\r\n    deleteItem,\r\n    clearCompleted\r\n\r\n} = slice.actions;","import {useSelector} from 'react-redux';\r\nimport TodoItem from '.';\r\n\r\nfunction TodoItemWrapper(){\r\n\r\n    const todos = useSelector(state => state.todoinp.todos);\r\n    const visibility = useSelector(state => state.todoinp.visibility);\r\n\r\n    return (\r\n        <div>\r\n            {todos.filter(todo => {\r\n                if (visibility === 'all') {\r\n                    return true;\r\n                } else if (visibility === 'active' && !todo.completed ) {\r\n                    return true;\r\n                } else if (visibility === 'completed' && todo.completed) {\r\n                    return true;\r\n                } else {\r\n                    return false;\r\n                }\r\n            }).map(todo => \r\n                <TodoItem \r\n                    key={`item-${todo.id}`} \r\n                    item={todo} \r\n                />)}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoItemWrapper;","import TodoItem from \"./TodoItem\";\nimport TodoItemWrapper from './ToDoItemWrapper'\n\nexport default TodoItem;\nexport {\n    TodoItemWrapper\n}","import {useDispatch} from 'react-redux';\nimport {setCompleted, deleteItem} from '../TodoInp/ToDoInpSlice';\n\nfunction TodoItem (props) {\n\n    const dispatch = useDispatch();\n\n    const { item } = props;\n\n    const style = {\n        border: '1px solid #ced4da',\n        borderRadius: '5px'\n    }\n\n    const onChangeCallback = event => {\n        dispatch(setCompleted({\n            itemId: item.id,\n            checked: event.target.checked\n        }));\n    }\n\n    const onClickCallback = () => {\n       dispatch(deleteItem(item.id));\n    }\n\n    return (\n        <div className='container'>\n            <div style={style} className=\"row mt-2 pt-2 pb-2\">\n                <div className=\"col-2\">\n                    <input type=\"checkbox\" onChange={onChangeCallback} />\n                </div>\n                \n                <div className=\"col-8\" style={{\n                    textDecoration: item.completed ? 'line-through' : 'none',\n                    color: item.completed ? 'gray': 'black'\n                }}>\n                    {item.title}\n                </div>\n\n                <div className=\"col-2\">\n                    <button onClick={onClickCallback} style={{\n                        borderRadius: '50%',\n                        border: 'none',\n                        outline: 'none',\n                        padding: '2px 10px',\n                        backgroundColor: '#dc3545',\n                        color: '#fff'\n                    }}>x</button>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default TodoItem;","import {useDispatch} from 'react-redux';\r\nimport {setVisibility, clearCompleted} from './ToDoInpSlice';\r\n\r\n\r\nfunction VisibilityLinks(){\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <div className=\"row d-flex\">\r\n            <div className=\"col-3\">\r\n                <button className='btn btn-secondary mt-3' onClick={() => dispatch(setVisibility('all'))}>All</button>\r\n            </div>\r\n            <div className=\"col-3\">\r\n            <button className='btn btn-primary mt-3' onClick={() => dispatch(setVisibility('active'))}>Active</button>\r\n            </div>\r\n            <div className=\"col-3\">\r\n                <button className='btn btn-success mt-3' onClick={() => dispatch(setVisibility('completed'))}>Completed</button>\r\n            </div>\r\n            <div className=\"col-3\">\r\n                <button className='btn btn-danger mt-3' onClick={() => dispatch(clearCompleted())}>Clear completed</button>\r\n            </div>\r\n        </div> \r\n    )\r\n}\r\n\r\nexport default VisibilityLinks;","import TodoInp from \"./TodoInp\";\nimport VisibilityLinks from \"./VisibilityLinks\";\n\nexport default TodoInp;\nexport {\n    VisibilityLinks\n}","import React, { useEffect } from 'react';\nimport TodoItem, {TodoItemWrapper} from '../TodoItem';\nimport {useSelector, useDispatch} from 'react-redux';\nimport {setTodos, setVisibility} from './ToDoInpSlice'\n\nfunction TodoInp (props) {\n\n    const dispatch = useDispatch();\n\n    const todos = useSelector(state => state.todoinp.todos);\n    const visibility = useSelector(state => state.todoinp.visibility);\n\n\n    const inputRef = React.useRef();\n    \n    const onSubmitCallback = event => {\n        event.preventDefault();\n\n        const inputValue = inputRef.current.value;\n        inputRef.current.value = '';\n\n        dispatch(setTodos([\n            ...todos, \n            {\n                title: inputValue,\n                completed: false,\n                id: Date.now()\n            }\n        ])\n        );\n    }\n\n    useEffect(() => {\n        if (window.localStorage) {\n            window.localStorage.setItem('todos', JSON.stringify(todos));\n        }\n    }, [todos]);\n\n    return (\n        <React.Fragment>\n                <h1>TODOS</h1>\n\n                <div className=\"form-group\">\n                    <form onSubmit={onSubmitCallback}>\n                        <input type=\"text\" placeholder=\"What needs to be done?\" className=\"form-control pt-2 pb-2\" ref={inputRef} />\n                    </form>\n                </div>\n        </React.Fragment>\n    );\n}\n\nexport default TodoInp;","import {configureStore} from '@reduxjs/toolkit';\r\nimport toDoInputReducer from './components/TodoInp/ToDoInpSlice';\r\n\r\nconst store = configureStore({\r\n    reducer: {\r\n        todoinp: toDoInputReducer\r\n    }\r\n})\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport reportWebVitals from './reportWebVitals';\nimport TodoInp, {VisibilityLinks} from './components/TodoInp';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport { TodoItemWrapper } from './components/TodoItem';\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <div className=\"container text-center\">\n        <TodoInp />\n        <TodoItemWrapper />\n        <VisibilityLinks />\n      </div>\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}